#!/usr/bin/perl -w

use strict;

use Getopt::Long;
use Pod::Usage;
use XML::Parser;
use LWP::UserAgent;
use File::Basename;
use Encode qw(encode_utf8 decode_utf8);
use utf8;

my $VERSION = '0.9';
my $NAME    = 'Podfeeder';
my $HOME    = 'http://hexten.net/podalyzer/';

$| = 1;

my $AGENT   = "$NAME $VERSION ($HOME)";

my @OKMIME = qw(text/xml text/html text/plain application/rss\+xml application/xml);
my $okmime = '^(' . join(')|(', @OKMIME) . ')';

my $man         = 0;                # Show man page?
my $help        = 0;                # Show help?
my $force       = 0;                # Force updates?
my $db          = undef;            #Â DB name
my $pathmap     = undef;            # Path mapping database

my $showdb      = { };              # Show name lookup database
my $mapdb       = { };              # Path mapping database
my %mapcache    = ( );              # Cache of mapped shownames


GetOptions('help|?'         => \$help,
           'man'            => \$man,
           'db=s'           => \$db,
           'pathmap=s'      => \$pathmap,
           'force'          => \$force) or pod2usage(2);

pod2usage(1) if $help;
pod2usage(-exitstatus => 0, -verbose => 2) if $man;
pod2usage(2) unless @ARGV && defined $db;   # Need some files

my $ua = new LWP::UserAgent();
$ua->agent($AGENT);
$ua->default_header("Accept-Encoding" => "gzip, deflate");

$mapdb = load_db($pathmap)
    if defined($pathmap);

$showdb = load_db($db)
    if -r $db;

while (my $feed = shift) {
    scan_feed($feed);
}

save_db($db, $showdb);

sub scan_feed {
    my ($url) = @_;

    my %in      = ( );
    my $title   = undef;
    my @enc     = ( );
        
    my $start_handler = sub {
        my $p    = shift;
        my $elem = shift;
        my %attr = @_;
        $in{$elem}++;
        if ($elem eq 'item') {
            $title  = undef;
            @enc    = ( );
        } elsif ($elem eq 'enclosure') {
            push @enc, $attr{url};
        }
    };
    
    my $end_handler = sub {
        my $p    = shift;
        my $elem = shift;
        my %attr = @_;
        if ($elem eq 'item') {
            tidy($title);
            update_db($title, @enc)
                if @enc;
        }
        $in{$elem}--;
    };
    
    my $char_handler = sub {
        my $p    = shift;
        my $text = shift;
        if ($in{item} && $in{title}) {
            $title .= $text;
        }
    };

    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);
    
    if ($res->is_success) {
        my $type    = $res->header('Content-Type');
        if ($type =~ m!$okmime!io) {
            # This hacky kludge (and mentions of utf8 elsewhere) /seem/ to do
            # the right thing in the majority of cases - but some UTF-8 feeds
            # that don't decode properly have been seen in the wild
            my $enc     = get_encoding($res->decoded_content, 'UTF-8');
            my $content = encode_utf8($res->decoded_content(charset => $enc));
                
            my $p = new XML::Parser(ProtocolEncoding => 'UTF-8');

            $p->setHandlers(Start       => $start_handler,
                            End         => $end_handler,
                            Char        => $char_handler);
                            
            $p->parsestring($content);
        } else {
            die "Unexpected MIME type: $type\n";
        }
    } else {
        die "Error: $res->code, $res->message\n";
    }
}

sub tidy {
    for (@_) {
        next unless defined $_;
        s/\s+/ /sg;
        s/^\s//g;
        s/\s$//g;
    }
}

sub get_encoding {
    my ($xml, $enc) = @_;
    
    my $p = new XML::Parser(ProtocolEncoding => 'UTF-8');
    
    $p->setHandlers(XMLDecl => 
        sub {
            my ($expat, $version, $encoding, $standalone) = @_;
            $enc = $encoding;
            $expat->finish();
        });
                    
    $p->parsestring($xml);
    
    return $enc;
}

# Load the show name database
sub load_db {
    my ($db) = @_;
    my $dict = { };
    local *DB;
    open DB, "<$db" or die "Can't read $db ($!)\n";
    binmode DB, ":utf8";
    while (<DB>) {
        chomp;
        next unless /^(\S+)\s+(.+)$/;
        $dict->{$1} = $2;
    }
    close DB;
    return $dict;
}

# Save the show name database
sub save_db {
    my ($db, $dict) = @_;
    local *DB;
    open DB, ">$db" or die "Can't write $db ($!)\n";
    binmode DB, ":utf8";
    for (sort keys %{$dict}) {
        print DB "$_\t$dict->{$_}\n";
    }
    close DB;
}

sub strip_url {
    my $url = shift;
    $url =~ s!^http://[^/]+!!;
    return $url;
}

sub map_path {
    my $inp     = shift;
    my $outp    = $inp;
    unless (exists($mapcache{$inp})) {
        for my $src (sort { length($b) <=> length($a) } keys %{$mapdb}) {
            my $srcp = quotemeta($src);
            my $dstp = $mapdb->{$src};
            if ($outp =~ s/^$srcp/$dstp/) {
                $mapcache{$inp} = $outp;
                return $outp;
            }
        }
        $mapcache{$inp} = $outp;
    }
    
    return $mapcache{$inp};
}

sub update_db {
    my $title = shift;
    for (@_) {
        my $url = map_path(strip_url($_));
        if ($force || !exists $showdb->{$url}) {
            $showdb->{$url} = $title;
        }
    }
}

__END__

=head1 NAME

podfeeder - Extract show names from an RSS feed

=head1 SYNOPSIS

podfeeder [options] -db=[file] [feed ...]

 Options:

    -db=[file]              name of a file to contain file path to 
                            podcast name mappings; mandatory
    -pathmap=[file]         file that translates path names in the
                            feed
    -force                  update all shows found in feed
    -help                   see this text
    -man                    see this text as a man page

=head1 OPTIONS

=over 8

=item B<-db>

This option is mandatory. It names the text file that contains the mapping between podcast URIs
and show names. Once updated using B<podfeeder> pass the name of this file to B<podalyzer> to
have shows properly named in the podalyzer report.

=item B<-pathmap>

If the feed uses different path names from those found in the log file use a pathmap file to
translate the paths found in the feed. For example if the feed uses paths like

    /podcasts/mycast/whatever.mp3

but the log files list requests for that file as

    /media/someclient/whatever.mp3

make a file called pathmap.db containing the following

    /podcasts/mycast/   /media/someclient/

and name it on the command line like this

    podfeeder -pathmap=pathmap.db feed.xml > shows.db

to have shows.db contain properly translated paths.

=item B<-force>

Force B<podfeeder> to update all entries in the mapping file for which it finds entries in the
feed. Without this flag only missing mappings will be added to the mapping file.

=back

=head1 DESCRIPTION

B<podfeeder> fetches and analyses one or more RSS feeds to extract show names for URIs and updates
a mapping file which can then be passed to B<podalyser> to generate reports in which shows are
correctly named.

=head1 EXAMPLES

    podfeeder -db=mapping.db http://example.com/category/podcasts/feed
    podalyzer -db=mapping.db --outdir=report --title='Example Podcast' logs 

=head1 SEE ALSO

    podalyser

=head1 AUTHORS

    Written by Andy Armstrong (andy@hexten.net) with much inspiration from Kevin Devin
    (Friends in Tech). Kevin's podstats script may be found here:

    http://forums.friendsintech.com/viewtopic.php?t=\
       40&sid=055c024f369658b97e01dd7ef282d71d

    (url wrapped for formatting - here is a shorter version: http://lyxus.net/cfv)

=head1 BUGS

    If you find any please report them to andy@hexten.net.

=cut
